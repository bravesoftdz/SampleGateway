program SampleGW;

{$APPTYPE CONSOLE}

{$DEFINE TCP_CLI_ACTIVE}

{$R *.res}

uses
  System.SysUtils,
  uFunction in 'src\uFunction.pas',
  uIndyTCPServer in 'src\uIndyTCPServer.pas',
  uIndyUDPServer in 'src\uIndyUDPServer.pas',
  uPacket in 'src\uPacket.pas',
  uDCPCrypt in 'src\uDCPCrypt.pas',
  uCrypto in 'src\uCrypto.pas',
  ConvertHex in 'src\ConvertHex.pas',
  ConsoleTimer in 'src\ConsoleTimer.pas',
  uIndyTCPClientThreaded in 'src\uIndyTCPClientThreaded.pas';

label
  GotoLabel;

begin
  try
    { TODO -oUser -cConsole Main : Insert code here }
    MWTCPServer := TMWTCPServer.Create;
    MWUDPServer := TMWUDPServer.Create;
    {$IFDEF TCP_CLI_ACTIVE}
    MWTCPClient := TMWTCPClient.Create;
    {$ENDIF}

//GotoLabel:
//    try
//      // ... message log
//      {$IFDEF TCP_CLI_ACTIVE}
//
////      MWTCPClient.Connect;
//      MWTCPClient.Start;
//      while True do
//      begin
////        if MWTCPClient.IsConnected then
//        begin
////          if slSendToServerMsgList.Count > 0 then
////          begin
////            MWTCPClient.SendToServer(slSendToServerMsgList[0]);
////            slSendToServerMsgList.BeginUpdate;
////            slSendToServerMsgList.Delete(0);
////            slSendToServerMsgList.EndUpdate;
////          end;
////          if slSendToClientMsgList.Count > 0 then
////          begin
////            TContextInfo(ContextList.Items[0]).Context.Connection.IOHandler.WriteLn(slSendToClientMsgList[0]);
////            slSendToClientMsgList.BeginUpdate;
////            slSendToClientMsgList.Delete(0);
////            slSendToClientMsgList.EndUpdate;
////          end;
//        end;
//      end;
//      {$ENDIF}
//    except
//      on E: Exception do
////        OutputDebugString(PChar(E.ToString));
//        WriteLn(E.ToString);
//    end;
////    slSendToServerMsgList.Clear;
////    slSendToClientMsgList.Clear;
////    MWTCPClient.Disconnect;
////    goto GotoLabel;

    MWTCPClient.Start;
    ReadLn;
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
  {$IFDEF TCP_CLI_ACTIVE}
//  MWTCPClient.Disconnect;
  MWTCPClient.Stop;
  MWTCPClient.Destroy;
  {$ENDIF}

  MWTCPServer.Destroy;
  MWUDPServer.Destroy;
end.
